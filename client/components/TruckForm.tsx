import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import {
  useInventory,
  TruckInventory,
  PaymentEntry,
  PaymentMode,
} from "../contexts/InventoryContext";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { Textarea } from "./ui/textarea";
import {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from "./ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "./ui/tabs";
import { Separator } from "./ui/separator";
import { Badge } from "./ui/badge";
import {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from "./ui/alert-dialog";
import {\n  Package,\n  User,\n  IndianRupee,\n  Calendar,\n  Plus,\n  Trash2,\n  Calculator,\n  Shield,\n  FileText,\n} from "lucide-react";

interface TruckFormProps {\n  truckId?: string;\n  mode: "create" | "edit";\n}

export default function TruckForm({ truckId, mode }: TruckFormProps) {\n  const navigate = useNavigate();\n  const { truckModels, addTruck, updateTruck, getTruck } = useInventory();\n  const [isLoading, setIsLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState("purchase");\n\n  const [formData, setFormData] = useState({\n    registrationNumber: "",\n    model: "",\n    initialModelYear: new Date().getFullYear(),\n    purchaseDate: "",\n    sellerDetails: {\n      name: "",\n      address: "",\n      phoneNumber: "",\n      aadhaarNumber: "",\n      emailId: "",\n    },\n    nocApplied: false,\n    nocAppliedDate: "",\n    nocReceivedDate: "",\n    newRegistrationNumber: "",\n    insuranceDetails: {\n      company: "",\n      idv: "",\n      annualPremium: "",\n      fitnessExpiry: "",\n      taxDueDate: "",\n      taxDueAmount: "",\n    },\n    fullPurchaseAmount: "",\n    expenses: {\n      transportation: "",\n      driver: "",\n      diesel: "",\n      toll: "",\n      bodyWork: "",\n      kamaniWork: "",\n      tyre: "",\n      paint: "",\n      floor: "",\n      fatta: "",\n      builty: "",\n      insurance: "",\n    },\n    saleDetails: {\n      buyerDetails: {\n        name: "",\n        address: "",\n        aadhaarNumber: "",\n        phoneNumber: "",\n        emailId: "",\n      },\n      saleAmount: "",\n      saleDate: "",\n      commissionDealerName: "",\n      commissionAmount: "",\n    },\n    status: "available" as TruckInventory["status"],\n  });\n\n  const [paymentModes, setPaymentModes] = useState<PaymentEntry[]>([]);\n  const [profit, setProfit] = useState(0);\n\n  useEffect(() => {\n    if (mode === "edit" && truckId) {\n      const truck = getTruck(truckId);\n      if (truck) {\n        setFormData({\n          registrationNumber: truck.registrationNumber,\n          model: truck.model,\n          initialModelYear: truck.initialModelYear,\n          purchaseDate: truck.purchaseDate,\n          sellerDetails: truck.sellerDetails,\n          nocApplied: truck.nocApplied,\n          nocAppliedDate: truck.nocAppliedDate || "",\n          nocReceivedDate: truck.nocReceivedDate || "",\n          newRegistrationNumber: truck.newRegistrationNumber || "",\n          insuranceDetails: {\n            company: truck.insuranceDetails.company,\n            idv: truck.insuranceDetails.idv.toString(),\n            annualPremium: truck.insuranceDetails.annualPremium.toString(),\n            fitnessExpiry: truck.insuranceDetails.fitnessExpiry,\n            taxDueDate: truck.insuranceDetails.taxDueDate,\n            taxDueAmount: truck.insuranceDetails.taxDueAmount.toString(),\n          },\n          fullPurchaseAmount: truck.fullPurchaseAmount.toString(),\n          expenses: {\n            transportation: truck.expenses.transportation.toString(),\n            driver: truck.expenses.driver.toString(),\n            diesel: truck.expenses.diesel.toString(),\n            toll: truck.expenses.toll.toString(),\n            bodyWork: truck.expenses.bodyWork.toString(),\n            kamaniWork: truck.expenses.kamaniWork.toString(),\n            tyre: truck.expenses.tyre.toString(),\n            paint: truck.expenses.paint.toString(),\n            floor: truck.expenses.floor.toString(),\n            fatta: truck.expenses.fatta.toString(),\n            builty: truck.expenses.builty.toString(),\n            insurance: truck.expenses.insurance.toString(),\n          },\n          saleDetails: truck.saleDetails\n            ? {\n                buyerDetails: truck.saleDetails.buyerDetails,\n                saleAmount: truck.saleDetails.saleAmount.toString(),\n                saleDate: truck.saleDetails.saleDate,\n                commissionDealerName: truck.saleDetails.commissionDealerName,\n                commissionAmount: truck.saleDetails.commissionAmount.toString(),\n              }\n            : {\n                buyerDetails: {\n                  name: "",\n                  address: "",\n                  aadhaarNumber: "",\n                  phoneNumber: "",\n                  emailId: "",\n                },\n                saleAmount: "",\n                saleDate: "",\n                commissionDealerName: "",\n                commissionAmount: "",\n              },\n          status: truck.status,\n        });\n        setPaymentModes(truck.paymentModes);\n      }\n    }\n  }, [mode, truckId, getTruck]);\n\n  useEffect(() => {\n    calculateProfit();\n  }, [formData.expenses, formData.fullPurchaseAmount, formData.saleDetails]);\n\n  const calculateProfit = () => {\n    const totalExpenses = Object.values(formData.expenses).reduce(\n      (sum, expense) => sum + (parseFloat(expense) || 0),\n      0,\n    );\n    const purchaseAmount = parseFloat(formData.fullPurchaseAmount) || 0;\n    const saleAmount = parseFloat(formData.saleDetails.saleAmount) || 0;\n    const commissionAmount =\n      parseFloat(formData.saleDetails.commissionAmount) || 0;\n\n    const totalCost = purchaseAmount + totalExpenses;\n    const netSaleAmount = saleAmount - commissionAmount;\n    setProfit(netSaleAmount - totalCost);\n  };\n\n  const addPaymentMode = () => {\n    const newPayment: PaymentEntry = {\n      id: Date.now().toString(),\n      mode: "Cash",\n      amount: 0,\n      date: "",\n      percentage: 0,\n    };\n    setPaymentModes([...paymentModes, newPayment]);\n  };\n\n  const updatePaymentMode = (id: string, updates: Partial<PaymentEntry>) => {\n    setPaymentModes(\n      paymentModes.map((payment) =>\n        payment.id === id ? { ...payment, ...updates } : payment,\n      ),\n    );\n  };\n\n  const removePaymentMode = (id: string) => {\n    setPaymentModes(paymentModes.filter((payment) => payment.id !== id));\n  };\n\n  const updateFormData = (section: string, field: string, value: any) => {\n    setFormData((prev) => ({\n      ...prev,\n      [section]: {\n        ...prev[section as keyof typeof prev],\n        [field]: value,\n      },\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const truckData = {\n        registrationNumber: formData.registrationNumber,\n        model: formData.model,\n        initialModelYear: formData.initialModelYear,\n        purchaseDate: formData.purchaseDate,\n        sellerDetails: formData.sellerDetails,\n        nocApplied: formData.nocApplied,\n        nocAppliedDate: formData.nocAppliedDate || undefined,\n        nocReceivedDate: formData.nocReceivedDate || undefined,\n        newRegistrationNumber: formData.newRegistrationNumber || undefined,\n        insuranceDetails: {\n          company: formData.insuranceDetails.company,\n          idv: parseFloat(formData.insuranceDetails.idv) || 0,\n          annualPremium:\n            parseFloat(formData.insuranceDetails.annualPremium) || 0,\n          fitnessExpiry: formData.insuranceDetails.fitnessExpiry,\n          taxDueDate: formData.insuranceDetails.taxDueDate,\n          taxDueAmount:\n            parseFloat(formData.insuranceDetails.taxDueAmount) || 0,\n        },\n        fullPurchaseAmount: parseFloat(formData.fullPurchaseAmount) || 0,\n        paymentModes,\n        expenses: {\n          transportation: parseFloat(formData.expenses.transportation) || 0,\n          driver: parseFloat(formData.expenses.driver) || 0,\n          diesel: parseFloat(formData.expenses.diesel) || 0,\n          toll: parseFloat(formData.expenses.toll) || 0,\n          bodyWork: parseFloat(formData.expenses.bodyWork) || 0,\n          kamaniWork: parseFloat(formData.expenses.kamaniWork) || 0,\n          tyre: parseFloat(formData.expenses.tyre) || 0,\n          paint: parseFloat(formData.expenses.paint) || 0,\n          floor: parseFloat(formData.expenses.floor) || 0,\n          fatta: parseFloat(formData.expenses.fatta) || 0,\n          builty: parseFloat(formData.expenses.builty) || 0,\n          insurance: parseFloat(formData.expenses.insurance) || 0,\n        },\n        saleDetails:\n          formData.saleDetails.saleAmount &&\n          parseFloat(formData.saleDetails.saleAmount) > 0\n            ? {\n                buyerDetails: formData.saleDetails.buyerDetails,\n                saleAmount: parseFloat(formData.saleDetails.saleAmount),\n                saleDate: formData.saleDetails.saleDate,\n                commissionDealerName:\n                  formData.saleDetails.commissionDealerName,\n                commissionAmount:\n                  parseFloat(formData.saleDetails.commissionAmount) || 0,\n              }\n            : undefined,\n        status: formData.status,\n      };\n\n      if (mode === "create") {\n        addTruck(truckData);\n      } else if (mode === "edit" && truckId) {\n        updateTruck(truckId, truckData);\n      }\n\n      navigate("/inventory");\n    } catch (error) {\n      console.error("Error saving truck:", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getYearOptions = () => {\n    const currentYear = new Date().getFullYear();\n    const years = [];\n    for (let year = 1980; year <= currentYear; year++) {\n      years.push(year);\n    }\n    return years.reverse();\n  };\n\n  const paymentModeOptions: PaymentMode[] = [\n    "Cash",\n    "RTGS",\n    "GPay",\n    "Paytm",\n    "PhonePe",\n    "Cheque",\n  ];\n\n  return (\n    <div className="p-6 space-y-6">\n      <div className="flex items-center justify-between">\n        <div>\n          <h1 className="text-3xl font-bold text-foreground">\n            {mode === "create" ? "Add New Truck" : "Edit Truck"}\n          </h1>\n          <p className="text-muted-foreground">\n            {mode === "create"\n              ? "Enter truck purchase details and manage inventory."\n              : `Editing truck ${truckId}`}\n          </p>\n        </div>\n        <Button variant="outline" onClick={() => navigate("/inventory")}>\n          Cancel\n        </Button>\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">\n          <TabsList className="grid w-full grid-cols-3">\n            <TabsTrigger value="purchase" className="flex items-center gap-2">\n              <Package className="w-4 h-4" />\n              Purchase Details\n            </TabsTrigger>\n            <TabsTrigger value="expenses" className="flex items-center gap-2">\n              <IndianRupee className="w-4 h-4" />\n              Expenses\n            </TabsTrigger>\n            <TabsTrigger value="sale" className="flex items-center gap-2">\n              <Calculator className="w-4 h-4" />\n              Sale Details\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value="purchase" className="space-y-6">\n            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">\n              {/* Truck Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className="flex items-center gap-2">\n                    <Package className="w-5 h-5" />\n                    Truck Information\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className="space-y-4">\n                  <div className="space-y-2">\n                    <Label htmlFor="registrationNumber">\n                      Registration Number *\n                    </Label>\n                    <Input\n                      id="registrationNumber"\n                      placeholder="e.g., MH-12-AB-1234"\n                      value={formData.registrationNumber}\n                      onChange={(e) =>\n                        setFormData({\n                          ...formData,\n                          registrationNumber: e.target.value,\n                        })\n                      }\n                      required\n                    />\n                  </div>\n\n                  <div className="grid grid-cols-2 gap-4">\n                    <div className="space-y-2">\n                      <Label htmlFor="model">Truck Model *</Label>\n                      <Select\n                        value={formData.model}\n                        onValueChange={(value) =>\n                          setFormData({ ...formData, model: value })\n                        }\n                        required\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder="Select model" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {truckModels.map((model) => (\n                            <SelectItem key={model} value={model}>\n                              {model}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className="space-y-2">\n                      <Label htmlFor="year">Model Year *</Label>\n                      <Select\n                        value={formData.initialModelYear.toString()}\n                        onValueChange={(value) =>\n                          setFormData({\n                            ...formData,\n                            initialModelYear: parseInt(value),\n                          })\n                        }\n                        required\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {getYearOptions().map((year) => (\n                            <SelectItem key={year} value={year.toString()}>\n                              {year}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div className="space-y-2">\n                    <Label htmlFor="purchaseDate">Purchase Date *</Label>\n                    <Input\n                      id="purchaseDate"\n                      type="date"\n                      value={formData.purchaseDate}\n                      onChange={(e) =>\n                        setFormData({\n                          ...formData,\n                          purchaseDate: e.target.value,\n                        })\n                      }\n                      required\n                    />\n                  </div>\n\n                  <div className="space-y-2">\n                    <Label htmlFor="purchaseAmount">Purchase Amount *</Label>\n                    <Input\n                      id="purchaseAmount"\n                      type="number"\n                      placeholder="Enter purchase amount"\n                      value={formData.fullPurchaseAmount}\n                      onChange={(e) =>\n                        setFormData({\n                          ...formData,\n                          fullPurchaseAmount: e.target.value,\n                        })\n                      }\n                      required\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Seller Details */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className="flex items-center gap-2">\n                    <User className="w-5 h-5" />\n                    Seller Information\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className="space-y-4">\n                  <div className="space-y-2">\n                    <Label htmlFor="sellerName">Seller Name *</Label>\n                    <Input\n                      id="sellerName"\n                      placeholder="Enter seller name"\n                      value={formData.sellerDetails.name}\n                      onChange={(e) =>\n                        updateFormData("sellerDetails", "name", e.target.value)\n                      }\n                      required\n                    />\n                  </div>\n\n                  <div className="space-y-2">\n                    <Label htmlFor="sellerAddress">Address *</Label>\n                    <Textarea\n                      id="sellerAddress"\n                      placeholder="Enter complete address"\n                      value={formData.sellerDetails.address}\n                      onChange={(e) =>\n                        updateFormData(\n                          "sellerDetails",\n                          "address",\n                          e.target.value,\n                        )\n                      }\n                      required\n                    />\n                  </div>\n\n                  <div className="grid grid-cols-2 gap-4">\n                    <div className="space-y-2">\n                      <Label htmlFor="sellerPhone">Phone Number *</Label>\n                      <Input\n                        id="sellerPhone"\n                        placeholder="10-digit mobile number"\n                        value={formData.sellerDetails.phoneNumber}\n                        onChange={(e) =>\n                          updateFormData(\n                            "sellerDetails",\n                            "phoneNumber",\n                            e.target.value,\n                          )\n                        }\n                        required\n                      />\n                    </div>\n\n                    <div className="space-y-2">\n                      <Label htmlFor="sellerAadhaar">Aadhaar Number *</Label>\n                      <Input\n                        id="sellerAadhaar"\n                        placeholder="12-digit Aadhaar number"\n                        value={formData.sellerDetails.aadhaarNumber}\n                        onChange={(e) =>\n                          updateFormData(\n                            "sellerDetails",\n                            "aadhaarNumber",\n                            e.target.value,\n                          )\n                        }\n                        maxLength={12}\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className="space-y-2">\n                    <Label htmlFor="sellerEmail">Email ID</Label>\n                    <Input\n                      id="sellerEmail"\n                      type="email"\n                      placeholder="Enter email address"\n                      value={formData.sellerDetails.emailId}\n                      onChange={(e) =>\n                        updateFormData(\n                          "sellerDetails",\n                          "emailId",\n                          e.target.value,\n                        )\n                      }\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* NOC and Insurance Details */}\n            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">\n              <Card>\n                <CardHeader>\n                  <CardTitle className="flex items-center gap-2">\n                    <FileText className="w-5 h-5" />\n                    NOC Details\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className="space-y-4">\n                  <div className="flex items-center space-x-2">\n                    <input\n                      type="checkbox"\n                      id="nocApplied"\n                      checked={formData.nocApplied}\n                      onChange={(e) =>\n                        setFormData({\n                          ...formData,\n                          nocApplied: e.target.checked,\n                        })\n                      }\n                      className="rounded border-gray-300"\n                    />\n                    <Label htmlFor="nocApplied">NOC Applied</Label>\n                  </div>\n\n                  {formData.nocApplied && (\n                    <>\n                      <div className="space-y-2">\n                        <Label htmlFor="nocAppliedDate">NOC Applied Date</Label>\n                        <Input\n                          id="nocAppliedDate"\n                          type="date"\n                          value={formData.nocAppliedDate}\n                          onChange={(e) =>\n                            setFormData({\n                              ...formData,\n                              nocAppliedDate: e.target.value,\n                            })\n                          }\n                        />\n                      </div>\n\n                      <div className="space-y-2">\n                        <Label htmlFor="nocReceivedDate">\n                          NOC Received Date\n                        </Label>\n                        <Input\n                          id="nocReceivedDate"\n                          type="date"\n                          value={formData.nocReceivedDate}\n                          onChange={(e) =>\n                            setFormData({\n                              ...formData,\n                              nocReceivedDate: e.target.value,\n                            })\n                          }\n                        />\n                      </div>\n\n                      <div className="space-y-2">\n                        <Label htmlFor="newRegistration">\n                          New Registration Number\n                        </Label>\n                        <Input\n                          id="newRegistration"\n                          placeholder="Enter new registration number"\n                          value={formData.newRegistrationNumber}\n                          onChange={(e) =>\n                            setFormData({\n                              ...formData,\n                              newRegistrationNumber: e.target.value,\n                            })\n                          }\n                        />\n                      </div>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className="flex items-center gap-2">\n                    <Shield className="w-5 h-5" />\n                    Insurance Details\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className="space-y-4">\n                  <div className="space-y-2">\n                    <Label htmlFor="insuranceCompany">Insurance Company</Label>\n                    <Input\n                      id="insuranceCompany"\n                      placeholder="Enter insurance company"\n                      value={formData.insuranceDetails.company}\n                      onChange={(e) =>\n                        updateFormData(\n                          "insuranceDetails",\n                          "company",\n                          e.target.value,\n                        )\n                      }\n                    />\n                  </div>\n\n                  <div className="grid grid-cols-2 gap-4">\n                    <div className="space-y-2">\n                      <Label htmlFor="idv">IDV Amount</Label>\n                      <Input\n                        id="idv"\n                        type="number"\n                        placeholder="Insured Declared Value"\n                        value={formData.insuranceDetails.idv}\n                        onChange={(e) =>\n                          updateFormData(\n                            "insuranceDetails",\n                            "idv",\n                            e.target.value,\n                          )\n                        }\n                      />\n                    </div>\n\n                    <div className="space-y-2">\n                      <Label htmlFor="premium">Annual Premium</Label>\n                      <Input\n                        id="premium"\n                        type="number"\n                        placeholder="Annual premium amount"\n                        value={formData.insuranceDetails.annualPremium}\n                        onChange={(e) =>\n                          updateFormData(\n                            "insuranceDetails",\n                            "annualPremium",\n                            e.target.value,\n                          )\n                        }\n                      />\n                    </div>\n                  </div>\n\n                  <div className="grid grid-cols-2 gap-4">\n                    <div className="space-y-2">\n                      <Label htmlFor="fitnessExpiry">Fitness Expiry</Label>\n                      <Input\n                        id="fitnessExpiry"\n                        type="date"\n                        value={formData.insuranceDetails.fitnessExpiry}\n                        onChange={(e) =>\n                          updateFormData(\n                            "insuranceDetails",\n                            "fitnessExpiry",\n                            e.target.value,\n                          )\n                        }\n                      />\n                    </div>\n\n                    <div className="space-y-2">\n                      <Label htmlFor="taxDueDate">Tax Due Date</Label>\n                      <Input\n                        id="taxDueDate"\n                        type="date"\n                        value={formData.insuranceDetails.taxDueDate}\n                        onChange={(e) =>\n                          updateFormData(\n                            "insuranceDetails",\n                            "taxDueDate",\n                            e.target.value,\n                          )\n                        }\n                      />\n                    </div>\n                  </div>\n\n                  <div className="space-y-2">\n                    <Label htmlFor="taxAmount">Tax Due Amount</Label>\n                    <Input\n                      id="taxAmount"\n                      type="number"\n                      placeholder="Enter tax amount"\n                      value={formData.insuranceDetails.taxDueAmount}\n                      onChange={(e) =>\n                        updateFormData(\n                          "insuranceDetails",\n                          "taxDueAmount",\n                          e.target.value,\n                        )\n                      }\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Payment Modes */}\n            <Card>\n              <CardHeader>\n                <div className="flex items-center justify-between">\n                  <CardTitle className="flex items-center gap-2">\n                    <IndianRupee className="w-5 h-5" />\n                    Payment Modes\n                  </CardTitle>\n                  <Button\n                    type="button"\n                    onClick={addPaymentMode}\n                    variant="outline"\n                    size="sm"\n                  >\n                    <Plus className="w-4 h-4 mr-2" />\n                    Add Payment\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent className="space-y-4">\n                {paymentModes.map((payment, index) => (\n                  <div\n                    key={payment.id}\n                    className="border border-border rounded-lg p-4 space-y-4"\n                  >\n                    <div className="flex items-center justify-between">\n                      <h4 className="font-medium">Payment {index + 1}</h4>\n                      <Button\n                        type="button"\n                        onClick={() => removePaymentMode(payment.id)}\n                        variant="ghost"\n                        size="sm"\n                      >\n                        <Trash2 className="w-4 h-4" />\n                      </Button>\n                    </div>\n\n                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">\n                      <div className="space-y-2">\n                        <Label>Payment Mode</Label>\n                        <Select\n                          value={payment.mode}\n                          onValueChange={(value) =>\n                            updatePaymentMode(payment.id, {\n                              mode: value as PaymentMode,\n                            })\n                          }\n                        >\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {paymentModeOptions.map((mode) => (\n                              <SelectItem key={mode} value={mode}>\n                                {mode}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className="space-y-2">\n                        <Label>Amount</Label>\n                        <Input\n                          type="number"\n                          placeholder="Amount"\n                          value={payment.amount}\n                          onChange={(e) =>\n                            updatePaymentMode(payment.id, {\n                              amount: parseFloat(e.target.value) || 0,\n                            })\n                          }\n                        />\n                      </div>\n\n                      <div className="space-y-2">\n                        <Label>Date</Label>\n                        <Input\n                          type="date"\n                          value={payment.date}\n                          onChange={(e) =>\n                            updatePaymentMode(payment.id, {\n                              date: e.target.value,\n                            })\n                          }\n                        />\n                      </div>\n\n                      <div className="space-y-2">\n                        <Label>Percentage</Label>\n                        <Input\n                          type="number"\n                          placeholder="Percentage"\n                          value={payment.percentage}\n                          onChange={(e) =>\n                            updatePaymentMode(payment.id, {\n                              percentage: parseFloat(e.target.value) || 0,\n                            })\n                          }\n                          min="0"\n                          max="100"\n                          step="0.1"\n                        />\n                      </div>\n                    </div>\n\n                    {(payment.mode === "RTGS" ||\n                      payment.mode === "GPay" ||\n                      payment.mode === "Paytm" ||\n                      payment.mode === "PhonePe") && (\n                      <div className="space-y-2">\n                        <Label>Transaction ID</Label>\n                        <Input\n                          placeholder="Enter transaction ID"\n                          value={payment.transactionId || ""}\n                          onChange={(e) =>\n                            updatePaymentMode(payment.id, {\n                              transactionId: e.target.value,\n                            })\n                          }\n                        />\n                      </div>\n                    )}\n\n                    {payment.mode === "Cheque" && (\n                      <div className="grid grid-cols-2 gap-4">\n                        <div className="space-y-2">\n                          <Label>Cheque Number</Label>\n                          <Input\n                            placeholder="Enter cheque number"\n                            value={payment.chequeNumber || ""}\n                            onChange={(e) =>\n                              updatePaymentMode(payment.id, {\n                                chequeNumber: e.target.value,\n                              })\n                            }\n                          />\n                        </div>\n                        <div className="space-y-2">\n                          <Label>Bank Name</Label>\n                          <Input\n                            placeholder="Enter bank name"\n                            value={payment.bankName || ""}\n                            onChange={(e) =>\n                              updatePaymentMode(payment.id, {\n                                bankName: e.target.value,\n                              })\n                            }\n                          />\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value="expenses" className="space-y-6">\n            <Card>\n              <CardHeader>\n                <CardTitle className="flex items-center gap-2">\n                  <IndianRupee className="w-5 h-5" />\n                  Total Expenditure\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">\n                  {Object.entries({\n                    transportation: "Transportation",\n                    driver: "Driver Charges",\n                    diesel: "Diesel",\n                    toll: "Toll Charges",\n                    bodyWork: "Body Work",\n                    kamaniWork: "Kamani Work",\n                    tyre: "Tyre Charges",\n                    paint: "Paint Expenses",\n                    floor: "Floor Expenses",\n                    fatta: "Fatta Expenses",\n                    builty: "Builty Expenses",\n                    insurance: "Insurance Expenses",\n                  }).map(([key, label]) => (\n                    <div key={key} className="space-y-2">\n                      <Label htmlFor={key}>{label}</Label>\n                      <Input\n                        id={key}\n                        type="number"\n                        placeholder="0"\n                        value={\n                          formData.expenses[key as keyof typeof formData.expenses]\n                        }\n                        onChange={(e) =>\n                          updateFormData("expenses", key, e.target.value)\n                        }\n                        min="0"\n                        step="0.01"\n                      />\n                    </div>\n                  ))}\n                </div>\n\n                <Separator className="my-6" />\n\n                <div className="bg-muted/50 p-4 rounded-lg">\n                  <div className="flex justify-between items-center">\n                    <span className="font-medium">Total Expenses:</span>\n                    <span className="text-xl font-bold">\n                      ₹\n                      {Object.values(formData.expenses)\n                        .reduce(\n                          (sum, expense) => sum + (parseFloat(expense) || 0),\n                          0,\n                        )\n                        .toLocaleString()}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value="sale" className="space-y-6">\n            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">\n              <Card className="lg:col-span-2">\n                <CardHeader>\n                  <CardTitle className="flex items-center gap-2">\n                    <User className="w-5 h-5" />\n                    Sale Information\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className="space-y-4">\n                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">\n                    <div className="space-y-2">\n                      <Label htmlFor="buyerName">Buyer Name</Label>\n                      <Input\n                        id="buyerName"\n                        placeholder="Enter buyer name"\n                        value={formData.saleDetails.buyerDetails.name}\n                        onChange={(e) =>\n                          setFormData({\n                            ...formData,\n                            saleDetails: {\n                              ...formData.saleDetails,\n                              buyerDetails: {\n                                ...formData.saleDetails.buyerDetails,\n                                name: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                      />\n                    </div>\n\n                    <div className="space-y-2">\n                      <Label htmlFor="buyerPhone">Phone Number</Label>\n                      <Input\n                        id="buyerPhone"\n                        placeholder="10-digit mobile number"\n                        value={formData.saleDetails.buyerDetails.phoneNumber}\n                        onChange={(e) =>\n                          setFormData({\n                            ...formData,\n                            saleDetails: {\n                              ...formData.saleDetails,\n                              buyerDetails: {\n                                ...formData.saleDetails.buyerDetails,\n                                phoneNumber: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                      />\n                    </div>\n                  </div>\n\n                  <div className="space-y-2">\n                    <Label htmlFor="buyerAddress">Address</Label>\n                    <Textarea\n                      id="buyerAddress"\n                      placeholder="Enter complete address"\n                      value={formData.saleDetails.buyerDetails.address}\n                      onChange={(e) =>\n                        setFormData({\n                          ...formData,\n                          saleDetails: {\n                            ...formData.saleDetails,\n                            buyerDetails: {\n                              ...formData.saleDetails.buyerDetails,\n                              address: e.target.value,\n                            },\n                          },\n                        })\n                      }\n                    />\n                  </div>\n\n                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">\n                    <div className="space-y-2">\n                      <Label htmlFor="buyerAadhaar">Aadhaar Number</Label>\n                      <Input\n                        id="buyerAadhaar"\n                        placeholder="12-digit Aadhaar number"\n                        value={formData.saleDetails.buyerDetails.aadhaarNumber}\n                        onChange={(e) =>\n                          setFormData({\n                            ...formData,\n                            saleDetails: {\n                              ...formData.saleDetails,\n                              buyerDetails: {\n                                ...formData.saleDetails.buyerDetails,\n                                aadhaarNumber: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        maxLength={12}\n                      />\n                    </div>\n\n                    <div className="space-y-2">\n                      <Label htmlFor="buyerEmail">Email ID</Label>\n                      <Input\n                        id="buyerEmail"\n                        type="email"\n                        placeholder="Enter email address"\n                        value={formData.saleDetails.buyerDetails.emailId}\n                        onChange={(e) =>\n                          setFormData({\n                            ...formData,\n                            saleDetails: {\n                              ...formData.saleDetails,\n                              buyerDetails: {\n                                ...formData.saleDetails.buyerDetails,\n                                emailId: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                      />\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">\n                    <div className="space-y-2">\n                      <Label htmlFor="saleAmount">Sale Amount</Label>\n                      <Input\n                        id="saleAmount"\n                        type="number"\n                        placeholder="Enter sale amount"\n                        value={formData.saleDetails.saleAmount}\n                        onChange={(e) =>\n                          setFormData({\n                            ...formData,\n                            saleDetails: {\n                              ...formData.saleDetails,\n                              saleAmount: e.target.value,\n                            },\n                          })\n                        }\n                      />\n                    </div>\n\n                    <div className="space-y-2">\n                      <Label htmlFor="saleDate">Sale Date</Label>\n                      <Input\n                        id="saleDate"\n                        type="date"\n                        value={formData.saleDetails.saleDate}\n                        onChange={(e) =>\n                          setFormData({\n                            ...formData,\n                            saleDetails: {\n                              ...formData.saleDetails,\n                              saleDate: e.target.value,\n                            },\n                          })\n                        }\n                      />\n                    </div>\n                  </div>\n\n                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">\n                    <div className="space-y-2">\n                      <Label htmlFor="dealerName">Commission Dealer Name</Label>\n                      <Input\n                        id="dealerName"\n                        placeholder="Enter dealer name"\n                        value={formData.saleDetails.commissionDealerName}\n                        onChange={(e) =>\n                          setFormData({\n                            ...formData,\n                            saleDetails: {\n                              ...formData.saleDetails,\n                              commissionDealerName: e.target.value,\n                            },\n                          })\n                        }\n                      />\n                    </div>\n\n                    <div className="space-y-2">\n                      <Label htmlFor="commissionAmount">Commission Amount</Label>\n                      <Input\n                        id="commissionAmount"\n                        type="number"\n                        placeholder="Enter commission amount"\n                        value={formData.saleDetails.commissionAmount}\n                        onChange={(e) =>\n                          setFormData({\n                            ...formData,\n                            saleDetails: {\n                              ...formData.saleDetails,\n                              commissionAmount: e.target.value,\n                            },\n                          })\n                        }\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Profit Calculator */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className="flex items-center gap-2">\n                    <Calculator className="w-5 h-5" />\n                    Profit Calculator\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className="space-y-4">\n                    <div className="text-center p-4 bg-muted/50 rounded-lg">\n                      <p className="text-sm text-muted-foreground mb-1">\n                        Calculated Profit\n                      </p>\n                      <p\n                        className={`text-2xl font-bold ${\n                          profit >= 0 ? "text-success" : "text-destructive"\n                        }`}\n                      >\n                        ₹{profit.toLocaleString()}\n                      </p>\n                    </div>\n\n                    <Separator />\n\n                    <div className="space-y-2">\n                      <div className="flex justify-between text-sm">\n                        <span>Purchase Amount:</span>\n                        <span className="font-medium">\n                          ₹\n                          {(\n                            parseFloat(formData.fullPurchaseAmount) || 0\n                          ).toLocaleString()}\n                        </span>\n                      </div>\n                      <div className="flex justify-between text-sm">\n                        <span>Total Expenses:</span>\n                        <span className="font-medium">\n                          ₹\n                          {Object.values(formData.expenses)\n                            .reduce(\n                              (sum, expense) =>\n                                sum + (parseFloat(expense) || 0),\n                              0,\n                            )\n                            .toLocaleString()}\n                        </span>\n                      </div>\n                      <div className="flex justify-between text-sm">\n                        <span>Sale Amount:</span>\n                        <span className="font-medium">\n                          ₹\n                          {(\n                            parseFloat(formData.saleDetails.saleAmount) || 0\n                          ).toLocaleString()}\n                        </span>\n                      </div>\n                      <div className="flex justify-between text-sm">\n                        <span>Commission:</span>\n                        <span className="font-medium">\n                          ₹\n                          {(\n                            parseFloat(formData.saleDetails.commissionAmount) ||\n                            0\n                          ).toLocaleString()}\n                        </span>\n                      </div>\n                      <Separator />\n                      <div className="flex justify-between text-sm font-medium">\n                        <span>Net Profit:</span>\n                        <span\n                          className={\n                            profit >= 0 ? "text-success" : "text-destructive"\n                          }\n                        >\n                          ₹{profit.toLocaleString()}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Form Actions */}\n        <div className="flex justify-end gap-4 pt-6">\n          <Button\n            type="button"\n            variant="outline"\n            onClick={() => navigate("/inventory")}\n          >\n            Cancel\n          </Button>\n          <Button\n            type="submit"\n            disabled={isLoading}\n            className="bg-primary hover:bg-primary/90"\n          >\n            {isLoading\n              ? "Saving..."\n              : mode === "create"\n                ? "Add Truck"\n                : "Update Truck"}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n